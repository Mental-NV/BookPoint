openapi: 3.0.3
info:
  title: Barber Booking Platform API (Phase 0)
  version: 0.1.0
  description: >
    Public booking + Admin calendar + Mock SMS + Mock Deposits + Basic analytics.
    Admin endpoints require Google-authenticated session/JWT.
servers:
  - url: https://api.example.com
tags:
  - name: Public
  - name: Admin
  - name: Mock
  - name: Analytics

paths:
  /public/branches:
    get:
      tags: [Public]
      summary: List branches
      parameters:
        - in: query
          name: tenantId
          schema: { type: string, format: uuid }
          required: true
      responses:
        '200':
          description: Branch list
          content:
            application/json:
              schema:
                type: array
                items: { $ref: '#/components/schemas/Branch' }

  /public/services:
    get:
      tags: [Public]
      summary: List services for a branch
      parameters:
        - in: query
          name: tenantId
          schema: { type: string, format: uuid }
          required: true
        - in: query
          name: branchId
          schema: { type: string, format: uuid }
          required: true
      responses:
        '200':
          description: Service list
          content:
            application/json:
              schema:
                type: array
                items: { $ref: '#/components/schemas/Service' }

  /public/staff:
    get:
      tags: [Public]
      summary: List staff (optionally filtered by service)
      parameters:
        - in: query
          name: tenantId
          schema: { type: string, format: uuid }
          required: true
        - in: query
          name: branchId
          schema: { type: string, format: uuid }
          required: true
        - in: query
          name: serviceId
          schema: { type: string, format: uuid }
          required: false
      responses:
        '200':
          description: Staff list
          content:
            application/json:
              schema:
                type: array
                items: { $ref: '#/components/schemas/Staff' }

  /public/availability:
    get:
      tags: [Public]
      summary: Get availability for a service/staff/date
      parameters:
        - in: query
          name: tenantId
          schema: { type: string, format: uuid }
          required: true
        - in: query
          name: branchId
          schema: { type: string, format: uuid }
          required: true
        - in: query
          name: serviceId
          schema: { type: string, format: uuid }
          required: true
        - in: query
          name: staffId
          schema: { type: string, format: uuid }
          required: false
        - in: query
          name: date
          schema: { type: string, format: date }
          required: true
      responses:
        '200':
          description: Availability slots
          content:
            application/json:
              schema:
                type: object
                properties:
                  slots:
                    type: array
                    items: { $ref: '#/components/schemas/AvailabilitySlot' }

  /public/booking/hold:
    post:
      tags: [Public]
      summary: Create a temporary hold on a slot (Redis-backed)
      requestBody:
        required: true
        content:
          application/json:
            schema: { $ref: '#/components/schemas/HoldRequest' }
      responses:
        '200':
          description: Hold created
          content:
            application/json:
              schema: { $ref: '#/components/schemas/HoldResponse' }
        '409':
          description: Slot conflict

  /public/booking/confirm:
    post:
      tags: [Public]
      summary: Confirm booking (creates appointment; may require deposit)
      requestBody:
        required: true
        content:
          application/json:
            schema: { $ref: '#/components/schemas/ConfirmBookingRequest' }
      responses:
        '200':
          description: Booking result
          content:
            application/json:
              schema: { $ref: '#/components/schemas/ConfirmBookingResponse' }
        '400':
          description: Validation error
        '409':
          description: Slot no longer available

  /public/booking/cancel:
    post:
      tags: [Public]
      summary: Client-initiated cancel by code
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                bookingCode: { type: string }
              required: [bookingCode]
      responses:
        '200': { description: Canceled }

  /public/booking/verify-phone:
    post:
      tags: [Public]
      summary: Mock phone verification (returns code for demo)
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                phone: { type: string }
              required: [phone]
      responses:
        '200':
          description: Verification code (mock)
          content:
            application/json:
              schema:
                type: object
                properties:
                  code: { type: string }

  /admin/calendar:
    get:
      tags: [Admin]
      summary: Get appointments for calendar view
      security: [{ bearerAuth: [] }]
      parameters:
        - in: query
          name: tenantId
          schema: { type: string, format: uuid }
          required: true
        - in: query
          name: branchId
          schema: { type: string, format: uuid }
          required: true
        - in: query
          name: from
          schema: { type: string, format: date-time }
          required: true
        - in: query
          name: to
          schema: { type: string, format: date-time }
          required: true
        - in: query
          name: staffId
          schema: { type: string, format: uuid }
          required: false
      responses:
        '200':
          description: Appointments
          content:
            application/json:
              schema:
                type: array
                items: { $ref: '#/components/schemas/Appointment' }

  /admin/appointments:
    post:
      tags: [Admin]
      summary: Create appointment (walk-in/phone)
      security: [{ bearerAuth: [] }]
      requestBody:
        required: true
        content:
          application/json:
            schema: { $ref: '#/components/schemas/AdminCreateAppointmentRequest' }
      responses:
        '201':
          description: Created
          content:
            application/json:
              schema: { $ref: '#/components/schemas/Appointment' }

  /admin/appointments/{id}:
    patch:
      tags: [Admin]
      summary: Modify appointment (reschedule/cancel/notes)
      security: [{ bearerAuth: [] }]
      parameters:
        - in: path
          name: id
          schema: { type: string, format: uuid }
          required: true
      requestBody:
        required: true
        content:
          application/json:
            schema: { $ref: '#/components/schemas/AdminUpdateAppointmentRequest' }
      responses:
        '200':
          description: Updated
          content:
            application/json:
              schema: { $ref: '#/components/schemas/Appointment' }

  /admin/clients/search:
    get:
      tags: [Admin]
      summary: Search clients by name/phone/email
      security: [{ bearerAuth: [] }]
      parameters:
        - in: query
          name: tenantId
          schema: { type: string, format: uuid }
          required: true
        - in: query
          name: q
          schema: { type: string }
          required: true
      responses:
        '200':
          description: Clients
          content:
            application/json:
              schema:
                type: array
                items: { $ref: '#/components/schemas/Client' }

  /admin/services:
    get:
      tags: [Admin]
      summary: List services
      security: [{ bearerAuth: [] }]
      parameters:
        - in: query
          name: tenantId
          schema: { type: string, format: uuid }
          required: true
        - in: query
          name: branchId
          schema: { type: string, format: uuid }
          required: false
      responses:
        '200':
          description: Services
          content:
            application/json:
              schema:
                type: array
                items: { $ref: '#/components/schemas/Service' }
    post:
      tags: [Admin]
      summary: Create service
      security: [{ bearerAuth: [] }]
      requestBody:
        required: true
        content:
          application/json:
            schema: { $ref: '#/components/schemas/ServiceCreateRequest' }
      responses:
        '201':
          description: Created
          content:
            application/json:
              schema: { $ref: '#/components/schemas/Service' }

  /admin/services/{id}:
    patch:
      tags: [Admin]
      summary: Update service
      security: [{ bearerAuth: [] }]
      parameters:
        - in: path
          name: id
          schema: { type: string, format: uuid }
          required: true
      requestBody:
        required: true
        content:
          application/json:
            schema: { $ref: '#/components/schemas/ServiceUpdateRequest' }
      responses:
        '200':
          description: Updated
          content:
            application/json:
              schema: { $ref: '#/components/schemas/Service' }

  /admin/staff:
    get:
      tags: [Admin]
      summary: List staff
      security: [{ bearerAuth: [] }]
      parameters:
        - in: query
          name: tenantId
          schema: { type: string, format: uuid }
          required: true
        - in: query
          name: branchId
          schema: { type: string, format: uuid }
          required: false
      responses:
        '200':
          description: Staff
          content:
            application/json:
              schema:
                type: array
                items: { $ref: '#/components/schemas/Staff' }
    post:
      tags: [Admin]
      summary: Create staff
      security: [{ bearerAuth: [] }]
      requestBody:
        required: true
        content:
          application/json:
            schema: { $ref: '#/components/schemas/StaffCreateRequest' }
      responses:
        '201':
          description: Created
          content:
            application/json:
              schema: { $ref: '#/components/schemas/Staff' }

  /admin/staff/{id}:
    patch:
      tags: [Admin]
      summary: Update staff (skills/hours/breaks/vacations)
      security: [{ bearerAuth: [] }]
      parameters:
        - in: path
          name: id
          schema: { type: string, format: uuid }
          required: true
      requestBody:
        required: true
        content:
          application/json:
            schema: { $ref: '#/components/schemas/StaffUpdateRequest' }
      responses:
        '200':
          description: Updated
          content:
            application/json:
              schema: { $ref: '#/components/schemas/Staff' }

  /admin/analytics/kpis:
    get:
      tags: [Analytics]
      summary: Basic KPIs
      security: [{ bearerAuth: [] }]
      parameters:
        - in: query
          name: tenantId
          schema: { type: string, format: uuid }
          required: true
        - in: query
          name: branchId
          schema: { type: string, format: uuid }
          required: false
        - in: query
          name: from
          schema: { type: string, format: date-time }
          required: true
        - in: query
          name: to
          schema: { type: string, format: date-time }
          required: true
      responses:
        '200':
          description: KPIs
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/KpisResponse'

  /admin/analytics/export:
    get:
      tags: [Analytics]
      summary: Export appointments CSV
      security: [{ bearerAuth: [] }]
      parameters:
        - in: query
          name: tenantId
          schema: { type: string, format: uuid }
          required: true
        - in: query
          name: from
          schema: { type: string, format: date-time }
          required: true
        - in: query
          name: to
          schema: { type: string, format: date-time }
          required: true
      responses:
        '200':
          description: CSV stream
          content:
            text/csv:
              schema:
                type: string
                format: binary

  /mock/sms/send:
    post:
      tags: [Mock]
      summary: Enqueue a mock SMS (backs UI demo)
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                phone: { type: string }
                templateKey: { type: string }
                payload: { type: object, additionalProperties: true }
              required: [phone, templateKey]
      responses:
        '202': { description: Enqueued }

  /mock/payments/create-intent:
    post:
      tags: [Mock]
      summary: Create a mock payment intent (returns fake checkout URL)
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                appointmentId: { type: string, format: uuid }
                amount:
                  $ref: '#/components/schemas/Money'
              required: [appointmentId, amount]
      responses:
        '200':
          description: Intent created
          content:
            application/json:
              schema:
                type: object
                properties:
                  intentId: { type: string }
                  checkoutUrl: { type: string }

  /mock/payments/callback:
    post:
      tags: [Mock]
      summary: Simulate provider callback (Approve/Fail)
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                intentId: { type: string }
                status:
                  type: string
                  enum: [succeeded, failed, refunded]
              required: [intentId, status]
      responses:
        '200': { description: Payment state updated }

components:
  securitySchemes:
    bearerAuth:
      type: http
      scheme: bearer
      bearerFormat: JWT

  schemas:
    Money:
      type: object
      properties:
        currency: { type: string, example: RUB }
        amount: { type: number, format: double }
      required: [currency, amount]

    Branch:
      type: object
      properties:
        id: { type: string, format: uuid }
        tenantId: { type: string, format: uuid }
        name: { type: string }
        address: { type: string }
        timezone: { type: string }
        workHours: { type: object, additionalProperties: true }

    Service:
      type: object
      properties:
        id: { type: string, format: uuid }
        tenantId: { type: string, format: uuid }
        name: { type: string }
        durationMin: { type: integer }
        basePrice: { type: number, format: double }
        requiresDeposit: { type: boolean }
        depositType:
          type: string
          enum: [fixed, percent]
        depositValue: { type: number, format: double }

    ServiceCreateRequest:
      type: object
      required: [tenantId, name, durationMin, basePrice]
      properties:
        tenantId: { type: string, format: uuid }
        name: { type: string }
        durationMin: { type: integer }
        basePrice: { type: number, format: double }
        requiresDeposit: { type: boolean }
        depositType: { type: string, enum: [fixed, percent] }
        depositValue: { type: number, format: double }

    ServiceUpdateRequest:
      type: object
      properties:
        name: { type: string }
        durationMin: { type: integer }
        basePrice: { type: number, format: double }
        requiresDeposit: { type: boolean }
        depositType: { type: string, enum: [fixed, percent] }
        depositValue: { type: number, format: double }

    Staff:
      type: object
      properties:
        id: { type: string, format: uuid }
        tenantId: { type: string, format: uuid }
        branchId: { type: string, format: uuid }
        displayName: { type: string }
        email: { type: string }
        skills: 
          type: array
          items: { type: string, format: uuid } # service ids
        workPattern: { type: object, additionalProperties: true }
        isActive: { type: boolean }

    StaffCreateRequest:
      type: object
      required: [tenantId, branchId, displayName]
      properties:
        tenantId: { type: string, format: uuid }
        branchId: { type: string, format: uuid }
        displayName: { type: string }
        email: { type: string }
        skills:
          type: array
          items: { type: string, format: uuid }
        workPattern: { type: object, additionalProperties: true }

    StaffUpdateRequest:
      type: object
      properties:
        displayName: { type: string }
        email: { type: string }
        skills:
          type: array
          items: { type: string, format: uuid }
        workPattern: { type: object, additionalProperties: true }
        isActive: { type: boolean }

    Client:
      type: object
      properties:
        id: { type: string, format: uuid }
        tenantId: { type: string, format: uuid }
        name: { type: string }
        phone: { type: string }
        email: { type: string }
        notes: { type: string }

    AppointmentStatus:
      type: string
      enum: [Pending, Confirmed, Canceled, NoShow]

    DepositStatus:
      type: string
      enum: [NotRequired, Required, Captured, Refunded, Failed]

    Appointment:
      type: object
      properties:
        id: { type: string, format: uuid }
        tenantId: { type: string, format: uuid }
        branchId: { type: string, format: uuid }
        staffId: { type: string, format: uuid }
        serviceId: { type: string, format: uuid }
        clientId: { type: string, format: uuid }
        startUtc: { type: string, format: date-time }
        endUtc: { type: string, format: date-time }
        status: { $ref: '#/components/schemas/AppointmentStatus' }
        depositStatus: { $ref: '#/components/schemas/DepositStatus' }
        source: { type: string, enum: [web, admin] }
        notes: { type: string }

    AvailabilitySlot:
      type: object
      properties:
        staffId: { type: string, format: uuid }
        startUtc: { type: string, format: date-time }
        endUtc: { type: string, format: date-time }

    HoldRequest:
      type: object
      required: [tenantId, branchId, staffId, serviceId, startUtc]
      properties:
        tenantId: { type: string, format: uuid }
        branchId: { type: string, format: uuid }
        staffId: { type: string, format: uuid }
        serviceId: { type: string, format: uuid }
        startUtc: { type: string, format: date-time }

    HoldResponse:
      type: object
      properties:
        holdId: { type: string }
        expiresAtUtc: { type: string, format: date-time }

    ConfirmBookingRequest:
      type: object
      required: [holdId, client]
      properties:
        holdId: { type: string }
        client:
          type: object
          required: [name, phone]
          properties:
            name: { type: string }
            phone: { type: string }
            email: { type: string }
        requireDeposit:
          type: boolean
          description: For client-side preview; server recomputes actual requirement.

    ConfirmBookingResponse:
      type: object
      properties:
        appointment:
          $ref: '#/components/schemas/Appointment'
        deposit:
          type: object
          nullable: true
          properties:
            intentId: { type: string }
            checkoutUrl: { type: string }

    AdminCreateAppointmentRequest:
      type: object
      required: [tenantId, branchId, staffId, serviceId, startUtc, client]
      properties:
        tenantId: { type: string, format: uuid }
        branchId: { type: string, format: uuid }
        staffId: { type: string, format: uuid }
        serviceId: { type: string, format: uuid }
        startUtc: { type: string, format: date-time }
        client:
          $ref: '#/components/schemas/Client'
        captureDeposit: { type: boolean, default: false }
        notes: { type: string }

    AdminUpdateAppointmentRequest:
      type: object
      properties:
        startUtc: { type: string, format: date-time }
        endUtc: { type: string, format: date-time }
        status: { $ref: '#/components/schemas/AppointmentStatus' }
        notes: { type: string }

    KpisResponse:
      type: object
      properties:
        totalAppointments: { type: integer }
        cancellations: { type: integer }
        cancellationRate: { type: number, format: double }
        occupancyPercent: { type: number, format: double }
        depositsCollected:
          $ref: '#/components/schemas/Money'
        avgLeadTimeHours: { type: number, format: double }
